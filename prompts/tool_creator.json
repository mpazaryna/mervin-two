{
  "title": "MCP Tool Creator Assistant",
  "description": "Guides users through creating custom MCP tools step by step",
  "template": "# Creating MCP Tool: {{tool_name}}\n\n## Tool Overview\n\n**Purpose:** {{tool_purpose}}\n\n**Category:** {{tool_category}}\n\n**Complexity:** {{complexity_level}}\n\n## Implementation Plan\n\n### 1. Tool Definition\n\n```python\nfrom tools.registry import tool\n\n@tool(\n    name=\"{{tool_name}}\",\n    description=\"{{tool_description}}\",\n    parameters={{tool_parameters}},\n    examples={{tool_examples}},\n    category=\"{{tool_category}}\"\n)\ndef {{function_name}}({{function_signature}}) -> {{return_type}}:\n    \"\"\"\n    {{docstring}}\n    \"\"\"\n    {{implementation_placeholder}}\n```\n\n### 2. Implementation Details\n\n{{implementation_guidance}}\n\n### 3. Error Handling\n\n```python\n{{error_handling_code}}\n```\n\n### 4. Testing Strategy\n\n```python\n{{test_code}}\n```\n\n## Step-by-Step Instructions\n\n### Step 1: {{step1_title}}\n\n{{step1_instructions}}\n\n### Step 2: {{step2_title}}\n\n{{step2_instructions}}\n\n### Step 3: {{step3_title}}\n\n{{step3_instructions}}\n\n### Step 4: {{step4_title}}\n\n{{step4_instructions}}\n\n## Validation Checklist\n\n{{validation_checklist}}\n\n## Enhancement Ideas\n\n{{enhancement_suggestions}}\n\n## Integration Notes\n\n{{integration_notes}}\n\n---\n\n*Tool creation guide generated by MCP Learning Server*",
  "parameters": [
    {
      "name": "tool_name",
      "type": "string",
      "description": "Name of the tool to create",
      "required": true
    },
    {
      "name": "tool_purpose",
      "type": "string",
      "description": "What the tool is designed to accomplish",
      "required": true
    },
    {
      "name": "tool_category",
      "type": "string",
      "description": "Category for the tool (utility, file, math, etc.)",
      "required": true
    },
    {
      "name": "complexity_level",
      "type": "string",
      "description": "Complexity level (Beginner, Intermediate, Advanced)",
      "required": true
    },
    {
      "name": "tool_description",
      "type": "string",
      "description": "Detailed description for the tool decorator",
      "required": true
    },
    {
      "name": "tool_parameters",
      "type": "string",
      "description": "Parameter schema as a Python dictionary string",
      "required": true
    },
    {
      "name": "tool_examples",
      "type": "string",
      "description": "Usage examples as a Python list string",
      "required": true
    },
    {
      "name": "function_name",
      "type": "string",
      "description": "Python function name (snake_case)",
      "required": true
    },
    {
      "name": "function_signature",
      "type": "string",
      "description": "Function parameters with type hints",
      "required": true
    },
    {
      "name": "return_type",
      "type": "string",
      "description": "Return type annotation",
      "required": true
    },
    {
      "name": "docstring",
      "type": "string",
      "description": "Function docstring",
      "required": true
    },
    {
      "name": "implementation_placeholder",
      "type": "string",
      "description": "Placeholder implementation code",
      "required": true
    },
    {
      "name": "implementation_guidance",
      "type": "string",
      "description": "Detailed guidance for implementing the tool",
      "required": true
    },
    {
      "name": "error_handling_code",
      "type": "string",
      "description": "Error handling implementation",
      "required": true
    },
    {
      "name": "test_code",
      "type": "string",
      "description": "Unit test examples",
      "required": true
    },
    {
      "name": "step1_title",
      "type": "string",
      "description": "Title for step 1",
      "required": true
    },
    {
      "name": "step1_instructions",
      "type": "string",
      "description": "Instructions for step 1",
      "required": true
    },
    {
      "name": "step2_title",
      "type": "string",
      "description": "Title for step 2",
      "required": true
    },
    {
      "name": "step2_instructions",
      "type": "string",
      "description": "Instructions for step 2",
      "required": true
    },
    {
      "name": "step3_title",
      "type": "string",
      "description": "Title for step 3",
      "required": true
    },
    {
      "name": "step3_instructions",
      "type": "string",
      "description": "Instructions for step 3",
      "required": true
    },
    {
      "name": "step4_title",
      "type": "string",
      "description": "Title for step 4",
      "required": true
    },
    {
      "name": "step4_instructions",
      "type": "string",
      "description": "Instructions for step 4",
      "required": true
    },
    {
      "name": "validation_checklist",
      "type": "string",
      "description": "Checklist to validate the tool implementation",
      "required": true
    },
    {
      "name": "enhancement_suggestions",
      "type": "string",
      "description": "Ideas for enhancing the tool",
      "required": false
    },
    {
      "name": "integration_notes",
      "type": "string",
      "description": "Notes about integrating with the MCP server",
      "required": false
    }
  ],
  "examples": [
    {
      "description": "Creating a text analysis tool",
      "arguments": {
        "tool_name": "text_analyzer",
        "tool_purpose": "Analyze text content for various metrics like word count, readability, and sentiment",
        "tool_category": "utility",
        "complexity_level": "Intermediate",
        "tool_description": "Analyze text content and provide metrics including word count, character count, readability score, and basic sentiment analysis",
        "tool_parameters": "{\n    \"text\": {\"type\": \"string\", \"description\": \"Text content to analyze\"},\n    \"metrics\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"List of metrics to calculate\", \"default\": [\"word_count\", \"char_count\"]}\n}",
        "tool_examples": "[\n    {\"text\": \"Hello world!\", \"metrics\": [\"word_count\"], \"result\": {\"word_count\": 2}},\n    {\"text\": \"This is a test.\", \"metrics\": [\"word_count\", \"char_count\"], \"result\": {\"word_count\": 4, \"char_count\": 15}}\n]",
        "function_name": "text_analyzer",
        "function_signature": "text: str, metrics: List[str] = None",
        "return_type": "Dict[str, Any]",
        "docstring": "Analyze text content and return requested metrics.",
        "implementation_placeholder": "# Validate inputs\n    if not text:\n        raise ValueError(\"Text cannot be empty\")\n    \n    if metrics is None:\n        metrics = [\"word_count\", \"char_count\"]\n    \n    results = {}\n    \n    # Calculate requested metrics\n    for metric in metrics:\n        if metric == \"word_count\":\n            results[metric] = len(text.split())\n        elif metric == \"char_count\":\n            results[metric] = len(text)\n        # Add more metrics as needed\n    \n    return results",
        "implementation_guidance": "1. **Input Validation**: Check that text is not empty and metrics are valid\n2. **Metric Calculation**: Implement each metric calculation separately\n3. **Extensibility**: Design the code to easily add new metrics\n4. **Performance**: Consider caching for expensive calculations\n5. **Error Handling**: Provide clear error messages for invalid inputs",
        "error_handling_code": "# Validate text input\nif not isinstance(text, str):\n    raise TypeError(\"Text must be a string\")\n\nif not text.strip():\n    raise ValueError(\"Text cannot be empty or whitespace only\")\n\n# Validate metrics\nvalid_metrics = [\"word_count\", \"char_count\", \"sentence_count\"]\nfor metric in metrics:\n    if metric not in valid_metrics:\n        raise ValueError(f\"Unknown metric: {metric}. Valid metrics: {valid_metrics}\")",
        "test_code": "import pytest\nfrom tools.utilities import text_analyzer\n\ndef test_text_analyzer_word_count():\n    result = text_analyzer(\"Hello world\", [\"word_count\"])\n    assert result[\"word_count\"] == 2\n\ndef test_text_analyzer_empty_text():\n    with pytest.raises(ValueError, match=\"Text cannot be empty\"):\n        text_analyzer(\"\", [\"word_count\"])\n\ndef test_text_analyzer_invalid_metric():\n    with pytest.raises(ValueError, match=\"Unknown metric\"):\n        text_analyzer(\"Hello\", [\"invalid_metric\"])",
        "step1_title": "Set Up the Tool Structure",
        "step1_instructions": "1. Create or open the appropriate module file (e.g., `tools/utilities.py`)\n2. Import the required dependencies\n3. Add the @tool decorator with the specified parameters\n4. Define the function signature with proper type hints",
        "step2_title": "Implement Core Logic",
        "step2_instructions": "1. Add input validation to ensure text is valid\n2. Implement each metric calculation in separate conditional blocks\n3. Store results in a dictionary\n4. Return the results dictionary",
        "step3_title": "Add Error Handling",
        "step3_instructions": "1. Add type checking for all parameters\n2. Validate that requested metrics are supported\n3. Handle edge cases like empty text or invalid characters\n4. Provide clear, actionable error messages",
        "step4_title": "Create Tests",
        "step4_instructions": "1. Write unit tests for normal operation\n2. Test edge cases and error conditions\n3. Verify that all supported metrics work correctly\n4. Test with various text inputs (short, long, special characters)",
        "validation_checklist": "- [ ] Tool is properly registered with @tool decorator\n- [ ] Function has appropriate type hints\n- [ ] Input validation is comprehensive\n- [ ] All advertised metrics are implemented\n- [ ] Error messages are clear and helpful\n- [ ] Unit tests cover main functionality\n- [ ] Edge cases are handled appropriately\n- [ ] Documentation is complete and accurate",
        "enhancement_suggestions": "- Add sentiment analysis using a library like TextBlob\n- Implement readability scores (Flesch-Kincaid, etc.)\n- Add language detection\n- Support for different text encodings\n- Batch processing for multiple texts\n- Export results to different formats",
        "integration_notes": "- The tool will be automatically registered when the module is imported\n- Ensure the module is included in the tools package\n- Test integration by calling the tool through the MCP protocol\n- Monitor performance with large text inputs"
      }
    }
  ],
  "tags": ["tool-creation", "development", "guide", "tutorial"]
}
